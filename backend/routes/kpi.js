// routes/kpi.js
const express = require("express");
const KPI = require("../models/KPI");
const verifyToken = require("../middlewares/authMiddleware");
const adminOnly = require("../middlewares/adminOnly");
const router = express.Router();

// üî∏ ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà login)
router.post("/add", verifyToken, async (req, res) => {
    try {
        const newKPI = new KPI({
            ...req.body,
            assignedUser: req.user.id, // ‡∏à‡∏≤‡∏Å token
        });

        const saved = await newKPI.save();
        res.status(201).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", kpi: saved });
    } catch (err) {
        res.status(500).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡πÑ‡∏î‡πâ", error: err.message });
    }
});

// üî∏ ‡∏î‡∏π KPI ‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
router.get("/me", verifyToken, async (req, res) => {
    try {
        const kpis = await KPI.find({ assignedUser: req.user.id });
        res.json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ KPI ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", kpi: kpis });
    } catch (err) {
        res.status(500).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á KPI ‡πÑ‡∏î‡πâ", error: err.message });
    }
});
router.get("/allUser", verifyToken, adminOnly, async (req, res) => {
    try {
        const kpis = await KPI.find().populate("assignedUser", "username email role");
        res.json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "KPI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", kpi: kpis });
    } catch (err) {
        res.status(500).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á KPI ‡πÑ‡∏î‡πâ", error: err.message });
    }
});
// PUT /kpi/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï/:id
router.put('/update/:id', verifyToken, async (req, res) => {
    try {
        const kpi = await KPI.findById(req.params.id);
        if (!kpi) return res.status(404).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: '‡πÑ‡∏°‡πà‡∏û‡∏ö KPI' });

        const isOwner = kpi.assignedUser.toString() === req.user.id;
        const isAdmin = req.user.role === 'admin';

        if (!isOwner && !isAdmin)
            return res.status(403).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï KPI ‡∏ô‡∏µ‡πâ' });

        // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        const { actualValue } = req.body;

        if (actualValue != null) {
            kpi.actualValue = actualValue;

            // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å actualValue / targetValue
            const progress = actualValue / kpi.targetValue;

            if (progress >= 1) {
                kpi.status = 'On Track';
            } else if (progress >= 0.6) {
                kpi.status = 'At Risk';
            } else {
                kpi.status = 'Off Track';
            }
        }

        const updated = await kpi.save();
        res.json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', kpi: updated });
    } catch (err) {
        res.status(500).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err.message });
    }
});
  

router.put("/edit/:id", verifyToken, async (req, res) => {
    try {
        const kpi = await KPI.findById(req.params.id);
        if (!kpi) {
            return res.status(404).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡πÑ‡∏°‡πà‡∏û‡∏ö KPI" });
        }

        const isOwner = kpi.assignedUser.toString() === req.user.id;
        const isAdmin = req.user.role === "admin";

        if (!isOwner && !isAdmin) {
            return res.status(403).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç KPI ‡∏ô‡∏µ‡πâ" });
        }

        const fields = ["title", "description", "targetValue", "startDate", "endDate"];
        fields.forEach((key) => {
            if (req.body[key] != null) {
                kpi[key] = req.body[key];
            }
        });

        const updated = await kpi.save();
        res.json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç KPI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", kpi: updated });
    } catch (err) {
        res.status(500).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err.message });
    }
});

router.delete("/delete/:id", verifyToken, async (req, res) => {
    try {
        const kpi = await KPI.findById(req.params.id);
        if (!kpi) {
            return res.status(404).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡πÑ‡∏°‡πà‡∏û‡∏ö KPI" });
        }

        const isOwner = kpi.assignedUser.toString() === req.user.id;
        const isAdmin = req.user.role === "admin";

        if (!isOwner && !isAdmin) {
            return res.status(403).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö KPI ‡∏ô‡∏µ‡πâ" });
        }

        await kpi.deleteOne();
        res.json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡∏•‡∏ö KPI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    } catch (err) {
        res.status(500).json({ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err.message });
    }
});
  

module.exports = router;
